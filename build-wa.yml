name: Build WA Venues CSV (Setlist.fm + MusicBrainz)

on:
  schedule:
    - cron: '20 7 * * *'   # daily at ~07:20 UTC (12:20am Pacific)
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      SETLISTFM_API_KEY: ${{ secrets.SETLISTFM_API_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build CSV
        run: |
          node -v
          mkdir -p scripts data
          cat > scripts/build_wa_csvs.js <<'EOF'
          const fs = require('fs').promises;

          const UA = 'wa-venues-pipeline/4.0 (contact: you@example.com)';
          const DAY_MS = 86400000;
          const LOOKBACK_DAYS = 365;     // past 12 months
          const LOOKAHEAD_DAYS = 180;    // next 6 months
          const MIN_EVENTS = 2;          // must have >=2 events in window

          const WA_CITIES = [
            'Seattle','Tacoma','Bellevue','Redmond','Kirkland','Everett','Bellingham',
            'Spokane','Olympia','Vancouver','Kennewick','Richland','Pasco',
            'Yakima','Wenatchee','Pullman','Ellensburg','Bremerton','Port Angeles'
          ];

          async function fetchJSON(url, headers={}) {
            const r = await fetch(url, { headers: { 'User-Agent': UA, ...headers }});
            if (!r.ok) throw new Error(\`HTTP \${r.status} for \${url}\`);
            return r.json();
          }
          async function fetchText(url, headers={}) {
            const r = await fetch(url, { headers: { 'User-Agent': UA, ...headers }});
            if (!r.ok) throw new Error(\`HTTP \${r.status} for \${url}\`);
            return r.text();
          }
          function sleep(ms){ return new Promise(r=>setTimeout(r,ms)); }

          function escapeCSV(s='') {
            const v = String(s ?? '');
            return /[",\n]/.test(v) ? \`"\${v.replace(/"/g,'""')}"\` : v;
          }

          // ---------- Setlist.fm ----------
          async function setlistfmGET(path, params={}) {
            const qs = new URLSearchParams(params).toString();
            const url = \`https://api.setlist.fm/rest/1.0\${path}\${qs ? '?' + qs : ''}\`;
            return fetchJSON(url, {
              'Accept': 'application/json',
              'x-api-key': process.env.SETLISTFM_API_KEY
            });
          }

          async function getVenuesForCity(city){
            let venues = [];
            let page = 1;
            while (page <= 3) {
              const data = await setlistfmGET('/search/venues', { cityName: city, stateCode: 'WA', p: page });
              const vs = data?.venues || [];
              venues.push(...vs);
              const total = Number(data?.total) || vs.length;
              if (page >= Math.ceil(total/20)) break;
              page++;
              await sleep(150);
            }
            return venues;
          }

          async function countEvents(venueId, fromISO, toISO){
            let count = 0, latest = null, page = 1;
            while (page <= 3) {
              const data = await setlistfmGET(\`/venue/\${venueId}/setlists\`, { p: page });
              const sets = data?.setlist || [];
              for (const s of sets) {
                const d = s?.eventDate; // "DD-MM-YYYY"
                if (!d) continue;
                const [dd, mm, yyyy] = d.split('-').map(x=>parseInt(x,10));
                const iso = \`\${yyyy}-\${String(mm).padStart(2,'0')}-\${String(dd).padStart(2,'0')}\`;
                const dt = new Date(iso);
                const from = new Date(fromISO), to = new Date(toISO);
                if (!isNaN(dt) && dt >= from && dt <= to) {
                  count++;
                  if (!latest || dt > latest) latest = dt;
                }
              }
              const total = Number(data?.total) || sets.length;
              if (page >= Math.ceil(total/20)) break;
              page++;
              await sleep(150);
            }
            return { count, latest: latest ? latest.toISOString().slice(0,10) : '' };
          }

          // ---------- MusicBrainz ----------
          async function mbSearchVenue(name, city){
            const q = encodeURIComponent(\`"\${name}" AND address:\${city} AND country:US\`);
            const url = \`https://musicbrainz.org/ws/2/place?query=\${q}&fmt=json\`;
            const data = await fetchJSON(url, { 'Accept': 'application/json' });
            return data?.places?.[0] || null;
          }
          async function mbPlaceUrls(mbid){
            const url = \`https://musicbrainz.org/ws/2/place/\${mbid}?inc=url-rels&fmt=json\`;
            const data = await fetchJSON(url, { 'Accept': 'application/json' });
            const rels = data?.relations || [];
            const urls = rels.map(r => r.url?.resource).filter(Boolean);
            const homepage = urls.find(u => /https?:\/\/(www\.)?[^\/]+\/?$/.test(u)) || '';
            return { homepage, urls };
          }

          // ---------- Image / social scrape ----------
          function absolutize(base, href){ try { return new URL(href, base).toString(); } catch { return ''; } }
          function pickBestImage(base, html){
            const candidates = [];
            // hero/logo <img>
            const imgRe = /<img[^>]+src=["']([^"']+)["'][^>]*>/ig;
            let m;
            while ((m = imgRe.exec(html))) {
              const tag = m[0], src = absolutize(base, m[1]);
              let score = 50;
              if (/logo/i.test(src)) score += 25;
              if (/hero|banner/i.test(src)) score += 20;
              const wh = tag.match(/\b(width|height)=["']?(\d{2,4})/ig);
              if (wh) score += wh.length*10;
              candidates.push({src,score});
            }
            // og:image
            const og = Array.from(html.matchAll(/<meta[^>]+property=["']og:image["'][^>]*content=["']([^"']+)["']/ig)).map(x=>absolutize(base,x[1]));
            og.forEach(u=>candidates.push({src:u,score:70}));
            // background-image
            const bg = Array.from(html.matchAll(/background-image:\s*url\(["']?([^"')]+)["']?\)/ig)).map(x=>absolutize(base,x[1]));
            bg.forEach(u=>candidates.push({src:u,score:65}));
            // icons
            const icons = Array.from(html.matchAll(/<link[^>]+rel=["'](?:icon|apple-touch-icon)["'][^>]*href=["']([^"']+)["']/ig)).map(x=>absolutize(base,x[1]));
            icons.forEach(u=>candidates.push({src:u,score:40}));

            const seen = new Set(), ranked=[];
            for (const c of candidates){
              const key=c.src.replace(/\?.*$/,'');
              if (!key || seen.has(key)) continue;
              seen.add(key); ranked.push(c);
            }
            ranked.sort((a,b)=>b.score-a.score);
            return ranked[0]?.src || '';
          }

          async function enrichFromWebsite(row){
            if (!row.website) return row;
            try {
              const html = await fetchText(row.website);
              if (!row.image) row.image = pickBestImage(row.website, html);
              const social = row.social||[];
              const reLink=/<a[^>]+href=["']([^"']+)["']/ig; let m;
              while ((m=reLink.exec(html))){
                const href=m[1];
                if (/instagram\.com\//i.test(href)) social.push(href);
                if (/facebook\.com\//i.test(href)) social.push(href);
                if (/(twitter\.com|x\.com)\//i.test(href)) social.push(href);
              }
              row.social=[...new Set(social)];
            } catch {}
            return row;
          }

          // ---------- Main ----------
          (async ()=>{
            try {
              const today=new Date();
              const fromISO=new Date(today.getTime()-LOOKBACK_DAYS*DAY_MS).toISOString().slice(0,10);
              const toISO=new Date(today.getTime()+LOOKAHEAD_DAYS*DAY_MS).toISOString().slice(0,10);

              // 1) Gather venues from Setlist.fm by city
              const venues=new Map();
              for (const city of WA_CITIES){
                const vs=await getVenuesForCity(city);
                for (const v of vs) venues.set(v.id,v);
                await sleep(200);
              }

              // 2) Filter by event counts in window
              const rows=[];
              for (const v of venues.values()){
                const {count,latest}=await countEvents(v.id,fromISO,toISO);
                if (count<MIN_EVENTS) continue;

                // 3) Enrich with MusicBrainz official website
                let website='', mbid='';
                try {
                  const mb=await mbSearchVenue(v.name,v.city?.name||'');
                  if (mb?.id){
                    mbid=mb.id;
                    const urls=await mbPlaceUrls(mbid);
                    website=urls.homepage||'';
                    await sleep(150);
                  }
                } catch{}

                // 4) Scrape site for image + social
                const row={
                  name:v.name,
                  city:v.city?.name||'(Unknown City)',
                  state:'WA',
                  capacity:'',
                  age:'',
                  region:'West',
                  venueType:'',
                  genres:'',
                  image:'',
                  website,
                  social:[],
                  sources:['Setlist.fm'].concat(mbid?['MusicBrainz']:[]),
                  id:mbid?`mb-${mbid}`:`slfm-${v.id}`,
                  confidence:95,
                  event_count:count,
                  last_event_date:latest
                };
                rows.push(await enrichFromWebsite(row));
                await sleep(200);
              }

              // 5) Write CSV
              const headers=['Venue Name','City','State','Capacity','Age Restrictions','Region','Venue Type','Genres (top 3)',
                'Image','Website','Social Links','Source(s)','Venue ID','Confidence','Event Count (±12mo)','Last Event Date'];
              const lines=[headers.map(escapeCSV).join(',')];
              for (const r of rows){
                lines.push([
                  r.name,r.city,r.state,r.capacity,r.age,r.region,r.venueType,r.genres,
                  r.image,r.website,(r.social||[]).join('|'),(r.sources||[]).join(';'),r.id,r.confidence,
                  r.event_count,r.last_event_date
                ].map(escapeCSV).join(','));
              }
              await fs.writeFile('data/combined_wa.csv',lines.join('\n')+'\n');
              console.log(`Final venues: ${rows.length}`);
            }catch(e){console.error(e);process.exit(1);}
          })();
          EOF

          node scripts/build_wa_csvs.js

      - name: Commit CSVs
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: WA venues — Setlist.fm verified + MusicBrainz URLs + site images"
          file_pattern: data/*.csv
          branch: main

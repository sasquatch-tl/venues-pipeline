name: Build WA Venues CSV

on:
  schedule:
    - cron: '20 7 * * *'   # daily at ~07:20 UTC (12:20am Pacific)
  workflow_dispatch:        # lets you run it on-demand from the Actions tab

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write       # needed to commit CSVs
    env:
      TM_API_KEY: ${{ secrets.TICKETMASTER_API_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build CSVs
        run: |
          node -v
          mkdir -p scripts data
          cat > scripts/build_wa_csvs.js <<'EOF'
          const fs = require('fs').promises;

          const EXCLUDE_RE = /\b(bar|pub|tavern|grill|saloon|taproom|brewery|cafe|coffee)\b/i;
          const REGION = 'West';
          const STATE = 'WA';

          function escapeCSV(s='') {
            const v = String(s ?? '');
            return /[",\n]/.test(v) ? `"${v.replace(/"/g,'""')}"` : v;
          }
          function guessVenueType(name='') {
            const s = name.toLowerCase();
            if (s.includes('amphitheat')) return 'Amphitheatre';
            if (s.includes('arena')) return 'Arena';
            if (s.includes('theatre') || s.includes('theater')) return 'Theatre';
            if (s.includes('hall')) return 'Hall';
            if (s.includes('auditorium')) return 'Auditorium';
            if (s.includes('pavilion')) return 'Pavilion';
            if (s.includes('ballroom')) return 'Ballroom';
            return 'Venue';
          }
          function key(name, city) { return (name||'').trim().toLowerCase()+'||'+(city||'').trim().toLowerCase(); }
          async function fetchJSON(url, headers={}) {
            const r = await fetch(url, { headers });
            if (!r.ok) throw new Error(\`HTTP \${r.status} for \${url}\`);
            return r.json();
          }

          async function fetchTicketmasterVenuesWA(apiKey, maxPages=5) {
            const out = [];
            const size = 200;
            for (let page=0; page<maxPages; page++) {
              const url = \`https://app.ticketmaster.com/discovery/v2/venues.json?countryCode=US&stateCode=\${STATE}&size=\${size}&page=\${page}&apikey=\${encodeURIComponent(apiKey)}\`;
              const data = await fetchJSON(url);
              const venues = data?._embedded?.venues || [];
              if (!venues.length) break;

              for (const v of venues) {
                const name = (v.name||'').trim();
                if (!name || EXCLUDE_RE.test(name)) continue;
                const city = v.city?.name || '(Unknown City)';
                const website = (v.url||'').trim();
                const image = (v.images && v.images[0]?.url) || '';
                out.push({
                  name, city, state: STATE,
                  capacity: '', age: '',
                  region: REGION,
                  venueType: guessVenueType(name),
                  genres: '',
                  image, website,
                  sources: ['Ticketmaster'],
                  id: v.id ? \`tmv-\${v.id}\` : '',
                  confidence: (website ? 80 : 75)
                });
              }
              if (venues.length < size) break; // last page
              await new Promise(r=>setTimeout(r, 120));
            }
            return out;
          }

          async function fetchWikidataWA() {
            const qidWA = 'Q1223'; // Washington (state)
            const classes = ['Q17350442','Q13219666','Q164432','Q15961988','Q15938568','Q171730'];
            const sparql = \`
            SELECT ?item ?itemLabel ?cityLabel ?website ?capacity ?image WHERE {
              VALUES ?class { \${classes.map(q=>\`wd:\${q}\`).join(' ')} }
              ?item wdt:P31/wdt:P279* ?class .
              ?item wdt:P131* wd:\${qidWA} .
              OPTIONAL { ?item wdt:P856 ?website. }
              OPTIONAL { ?item wdt:P1083 ?capacity. }
              OPTIONAL { ?item wdt:P18 ?image. }
              OPTIONAL { ?item wdt:P131 ?city. }
              SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
            }\`;
            const url = 'https://query.wikidata.org/sparql?format=json&query=' + encodeURIComponent(sparql);
            const data = await fetchJSON(url, { 'User-Agent':'wa-venues-pipeline/1.0' });
            const rows = data?.results?.bindings || [];
            const out = [];
            for (const b of rows) {
              const name = (b.itemLabel?.value || '').trim();
              if (!name || EXCLUDE_RE.test(name)) continue;
              const city = (b.cityLabel?.value || '(Unknown City)').trim();
              const website = (b.website?.value || '').trim();
              const capacity = b.capacity?.value ? Number(b.capacity.value) : '';
              const image = (b.image?.value || '').trim();
              out.push({
                name, city, state: STATE,
                capacity, age: '',
                region: REGION,
                venueType: guessVenueType(name),
                genres: '',
                image, website,
                sources: ['WikidataSPARQL'],
                id: 'wd-' + (b.item?.value?.split('/').pop() || ''),
                confidence: 85 + (website ? 5 : 0)
              });
            }
            return out;
          }

          function toCSV(rows) {
            const headers = ['Venue Name','City','State','Capacity','Age Restrictions','Region','Venue Type','Genres (top 3)','Image','Website','Source(s)','Venue ID','Confidence'];
            const lines = [headers.map(escapeCSV).join(',')];
            for (const r of rows) {
              lines.push([
                r.name, r.city, r.state, r.capacity, r.age, r.region, r.venueType, r.genres, r.image, r.website,
                (r.sources||[]).join(';'), r.id, r.confidence
              ].map(escapeCSV).join(','));
            }
            return lines.join('\n')+'\n';
          }

          function mergeAndDedupe(a, b) {
            const m = new Map();
            const put = (v) => {
              const k = key(v.name, v.city);
              if (!m.has(k)) { m.set(k, v); return; }
              const t = m.get(k);
              if (!t.website && v.website) t.website = v.website;
              if (!t.image && v.image) t.image = v.image;
              if (!t.capacity && v.capacity) t.capacity = v.capacity;
              if (!t.venueType && v.venueType) t.venueType = v.venueType;
              t.sources = Array.from(new Set([...(t.sources||[]), ...(v.sources||[])]));
              t.confidence = Math.max(t.confidence||0, v.confidence||0);
            };
            [...a, ...b].forEach(put);
            return [...m.values()].filter(v =>
              !EXCLUDE_RE.test(v.name || '') &&
              !/\b(former|defunct|closed)\b/i.test(v.name || '')
            ).sort((x,y)=>
              x.state.localeCompare(y.state) ||
              x.city.localeCompare(y.city) ||
              x.name.localeCompare(y.name)
            );
          }

          (async () => {
            try {
              const tmKey = process.env.TM_API_KEY;
              if (!tmKey) throw new Error('Missing TM_API_KEY env');

              const [tm, wd] = await Promise.all([
                fetchTicketmasterVenuesWA(tmKey, 5),
                fetchWikidataWA()
              ]);

              await fs.mkdir('data', { recursive: true });
              await fs.writeFile('data/tm_wa.csv', toCSV(tm));
              await fs.writeFile('data/wd_wa.csv', toCSV(wd));

              const combined = mergeAndDedupe(tm, wd);
              await fs.writeFile('data/combined_wa.csv', toCSV(combined));

              console.log(\`TM: \${tm.length}, WD: \${wd.length}, Combined: \${combined.length}\`);
            } catch (e) {
              console.error(e);
              process.exit(1);
            }
          })();
          EOF

          node scripts/build_wa_csvs.js

      - name: Commit CSVs
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update WA venues CSV"
          file_pattern: data/*.csv
